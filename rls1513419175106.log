error: expected identifier, found keyword `fn`
 --> bogofile:3:1
  |
3 | fn main() {
  | ^^

error: expected one of `;` or `as`, found `<eof>`
 --> bogofile:1:15
  |
1 | extern crate t
  |               ^

error: expected identifier, found keyword `fn`
 --> bogofile:3:1
  |
3 | fn main() {
  | ^^

error: expected one of `;` or `as`, found `mod`
 --> bogofile:4:1
  |
4 | mod io{
  | ^^^

error: expected identifier, found keyword `mod`
 --> bogofile:3:1
  |
3 | mod io {
  | ^^^

error: expected identifier, found keyword `use`
 --> bogofile:2:1
  |
2 | use std::io::{ Stdin, Stdout, Write, Read };
  | ^^^

{"message":"unresolved import `io`","code":{"code":"E0432","explanation":"\nAn import was unresolved.\n\nErroneous code example:\n\n```compile_fail,E0432\nuse something::Foo; // error: unresolved import `something::Foo`.\n```\n\nPaths in `use` statements are relative to the crate root. To import items\nrelative to the current and parent modules, use the `self::` and `super::`\nprefixes, respectively. Also verify that you didn't misspell the import\nname and that the import exists in the module from where you tried to\nimport it. Example:\n\n```\nuse self::something::Foo; // ok!\n\nmod something {\n    pub struct Foo;\n}\n# fn main() {}\n```\n\nOr, if you tried to use a module from an external crate, you may have missed\nthe `extern crate` declaration (which is usually placed in the crate root):\n\n```\nextern crate core; // Required to use the `core` crate\n\nuse core::any;\n# fn main() {}\n```\n"},"level":"error","spans":[{"file_name":"rustcalc/src/main.rs","byte_start":27,"byte_end":29,"line_start":3,"line_end":3,"column_start":5,"column_end":7,"is_primary":true,"text":[{"text":"use io;","highlight_start":5,"highlight_end":7}],"label":"no `io` in the root","suggested_replacement":null,"expansion":null}],"children":[],"rendered":"error[E0432]: unresolved import `io`\n --> rustcalc/src/main.rs:3:5\n  |\n3 | use io;\n  |     ^^ no `io` in the root\n\n"}
{"message":"unused import: `io`","code":{"code":"unused_imports","explanation":null},"level":"warning","spans":[{"file_name":"rustcalc/src/main.rs","byte_start":27,"byte_end":29,"line_start":3,"line_end":3,"column_start":5,"column_end":7,"is_primary":true,"text":[{"text":"use io;","highlight_start":5,"highlight_end":7}],"label":null,"suggested_replacement":null,"expansion":null}],"children":[{"message":"#[warn(unused_imports)] on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"warning: unused import: `io`\n --> rustcalc/src/main.rs:3:5\n  |\n3 | use io;\n  |     ^^\n  |\n  = note: #[warn(unused_imports)] on by default\n\n"}
{"message":"unresolved import `io`","code":{"code":"E0432","explanation":"\nAn import was unresolved.\n\nErroneous code example:\n\n```compile_fail,E0432\nuse something::Foo; // error: unresolved import `something::Foo`.\n```\n\nPaths in `use` statements are relative to the crate root. To import items\nrelative to the current and parent modules, use the `self::` and `super::`\nprefixes, respectively. Also verify that you didn't misspell the import\nname and that the import exists in the module from where you tried to\nimport it. Example:\n\n```\nuse self::something::Foo; // ok!\n\nmod something {\n    pub struct Foo;\n}\n# fn main() {}\n```\n\nOr, if you tried to use a module from an external crate, you may have missed\nthe `extern crate` declaration (which is usually placed in the crate root):\n\n```\nextern crate core; // Required to use the `core` crate\n\nuse core::any;\n# fn main() {}\n```\n"},"level":"error","spans":[{"file_name":"rustcalc/src/main.rs","byte_start":27,"byte_end":29,"line_start":3,"line_end":3,"column_start":5,"column_end":7,"is_primary":true,"text":[{"text":"use io;","highlight_start":5,"highlight_end":7}],"label":"no `io` in the root","suggested_replacement":null,"expansion":null}],"children":[],"rendered":"error[E0432]: unresolved import `io`\n --> rustcalc/src/main.rs:3:5\n  |\n3 | use io;\n  |     ^^ no `io` in the root\n\n"}
{"message":"unused import: `io`","code":{"code":"unused_imports","explanation":null},"level":"warning","spans":[{"file_name":"rustcalc/src/main.rs","byte_start":27,"byte_end":29,"line_start":3,"line_end":3,"column_start":5,"column_end":7,"is_primary":true,"text":[{"text":"use io;","highlight_start":5,"highlight_end":7}],"label":null,"suggested_replacement":null,"expansion":null}],"children":[{"message":"#[warn(unused_imports)] on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"warning: unused import: `io`\n --> rustcalc/src/main.rs:3:5\n  |\n3 | use io;\n  |     ^^\n  |\n  = note: #[warn(unused_imports)] on by default\n\n"}
error: expected identifier, found keyword `fn`
 --> bogofile:3:1
  |
3 | fn main() {}
  | ^^

error: expected identifier, found keyword `fn`
 --> bogofile:3:1
  |
3 | fn main() {}
  | ^^

error: expected identifier, found keyword `use`
 --> bogofile:2:1
  |
2 | use std::io::{Read, Stdin, Stdout, Write};
  | ^^^

error: expected identifier, found keyword `use`
 --> bogofile:2:1
  |
2 | use std::io::{Read, Stdin, Stdout, Write};
  | ^^^

error: expected identifier, found keyword `fn`
 --> bogofile:3:1
  |
3 | fn main() {
  | ^^

error: expected identifier, found keyword `fn`
 --> bogofile:3:1
  |
3 | fn main() {
  | ^^

error: expected identifier, found keyword `mod`
 --> bogofile:3:1
  |
3 | mod io;
  | ^^^

error: expected identifier, found keyword `use`
 --> bogofile:2:1
  |
2 | use termion::raw::IntoRawMode;
  | ^^^

thread 'request-worker-1' panicked at 'byte index 18446744073709551615 is out of bounds of `extern crate termion;

use termion::raw::RawTerminal;
use termion::raw::IntoRawMode;
use termion::input::TermRead;
use termion::event::Key;

use std::io::{Read, Stdin, Stdout, Write};

pub fn g(prompt: &String, terminal: RawTerminal<Stdout>) -> String {
  `[...]', /checkout/src/libcore/str/mod.rs:2217:8
thread 'request-worker-2' panicked at 'byte index 18446744073709551615 is out of bounds of `extern crate termion;

use termion::raw::RawTerminal;
use termion::raw::IntoRawMode;
use termion::input::TermRead;
use termion::event::Key;

use std::io::{Read, Stdin, Stdout, Write};

pub fn ge(prompt: &String, terminal: RawTerminal<Stdout>) -> String {
 `[...]', /checkout/src/libcore/str/mod.rs:2217:8
thread 'request-worker-2' panicked at 'byte index 18446744073709551615 is out of bounds of `extern crate termion;

use termion::raw::RawTerminal;
use termion::raw::IntoRawMode;
use termion::input::TermRead;
use termion::event::Key;

use std::io::{Read, Stdin, Stdout, Write};

pub fn get(prompt: &String, terminal: RawTerminal<Stdout>) -> String {
`[...]', /checkout/src/libcore/str/mod.rs:2217:8
thread 'request-worker-3' panicked at 'byte index 18446744073709551615 is out of bounds of `extern crate termion;

use termion::raw::RawTerminal;
use termion::raw::IntoRawMode;
use termion::input::TermRead;
use termion::event::Key;

use std::io::{Read, Stdin, Stdout, Write};

pub fn get_(prompt: &String, terminal: RawTerminal<Stdout>) -> String {`[...]', /checkout/src/libcore/str/mod.rs:2217:8
thread 'request-worker-1' panicked at 'byte index 18446744073709551615 is out of bounds of `extern crate termion;

use termion::raw::RawTerminal;
use termion::raw::IntoRawMode;
use termion::input::TermRead;
use termion::event::Key;

use std::io::{Read, Stdin, Stdout, Write};

pub fn get_l(prompt: &String, terminal: RawTerminal<Stdout>) -> String `[...]', /checkout/src/libcore/str/mod.rs:2217:8
thread 'request-worker-1' panicked at 'byte index 18446744073709551615 is out of bounds of `extern crate termion;

use termion::raw::RawTerminal;
use termion::raw::IntoRawMode;
use termion::input::TermRead;
use termion::event::Key;

use std::io::{Read, Stdin, Stdout, Write};

pub fn get_li(prompt: &String, terminal: RawTerminal<Stdout>) -> String`[...]', /checkout/src/libcore/str/mod.rs:2217:8
thread 'request-worker-1' panicked at 'byte index 18446744073709551615 is out of bounds of `extern crate termion;

use termion::raw::RawTerminal;
use termion::raw::IntoRawMode;
use termion::input::TermRead;
use termion::event::Key;

use std::io::{Read, Stdin, Stdout, Write};

pub fn get_lin(prompt: &String, terminal: RawTerminal<Stdout>) -> Strin`[...]', /checkout/src/libcore/str/mod.rs:2217:8
thread 'request-worker-2' panicked at 'byte index 18446744073709551615 is out of bounds of `extern crate termion;

use termion::raw::RawTerminal;
use termion::raw::IntoRawMode;
use termion::input::TermRead;
use termion::event::Key;

use std::io::{Read, Stdin, Stdout, Write};

pub fn get_line(prompt: &String, terminal: RawTerminal<Stdout>) -> Stri`[...]', /checkout/src/libcore/str/mod.rs:2217:8
error: expected identifier, found keyword `fn`
 --> bogofile:3:1
  |
3 | fn main() {
  | ^^

